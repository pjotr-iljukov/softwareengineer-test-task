plugins {
    id 'java'
    id 'idea'
    id 'com.google.protobuf' version "0.8.18"
    id 'com.google.cloud.tools.jib' version '3.2.1'
}

group 'com.klausapp'
version '0.0.2'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": "com.klausapp.App"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

ext {
    grpcVersion = '1.42.1'
    protobufVersion = '3.19.1'
    junitVersion = '5.8.2'
    assertjVersion = '3.22.0'
    mockitoVersion = '4.4.0'
    javaxVersion = '1.2'
    sqliteDriverVersion = '3.36.0.3'
}

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "javax.annotation:javax.annotation-api:${javaxVersion}"
    implementation "org.xerial:sqlite-jdbc:${sqliteDriverVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

test {
    useJUnitPlatform()
}

jib {
    from {
        image = 'adoptopenjdk/openjdk11:alpine-jre'
    }
    to {
        image = 'software-test-task'
        tags = [version, 'latest']
    }
    container {
        ports = ['9090']
        mainClass = 'com.klausapp.App'
    }
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}
